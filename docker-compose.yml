version: '3.8'

x-airflow-common:
  &airflow-common
  build: ./airflow
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/plugins:/opt/airflow/plugins
    - /var/run/docker.sock:/var/run/docker.sock
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  redis:
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow-apiserver:
    <<: *airflow-common
    command: api-server
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-dag-processor:
    <<: *airflow-common
    command: dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-apiserver:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        # (init script kept unchanged)
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow dags list
    depends_on:
      <<: *airflow-common-depends-on

  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  data_service:
    build:
      context: ./src/data/build_data
      dockerfile: Dockerfile
    container_name: data_service
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    environment:
      - DATA_PATH=${DATA_PATH}
      - IMPORT_DATA_LOGGER_PATH=${IMPORT_DATA_LOGGER_PATH}
      - PYTHONUNBUFFERED=1

  training_service:
    build:
      context: ./src/models/train
      dockerfile: Dockerfile
    container_name: training_service
    depends_on:
      - data_service
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
      - ./data:/app/data
    environment:
      - TRAIN_MODEL_LOGGER_PATH=${TRAIN_MODEL_LOGGER_PATH}
      - TOKENIZER_CONFIG_PATH=${TOKENIZER_CONFIG_PATH}
      - LSTM_MODEL_PATH=${LSTM_MODEL_PATH}
      - VGG16_MODEL_PATH=${VGG16_MODEL_PATH}
      - BEST_WEIGHTS_PATH_PKL=${BEST_WEIGHTS_PATH_PKL}
      - DATA_PATH=${DATA_PATH}
      - IMAGES_PATH=${IMAGES_PATH}
      - CONCATENATED_MODEL_PATH=${CONCATENATED_MODEL_PATH}
      - MAPPER_PATH=${MAPPER_PATH}
      - BEST_WEIGHTS_PATH=${BEST_WEIGHTS_PATH}
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
      - MLFLOW_EXPERIMENT_NAME=${MLFLOW_EXPERIMENT_NAME}
      - DAGSHUB_USERNAME=${DAGSHUB_USERNAME}
      - DAGSHUB_TOKEN=${DAGSHUB_TOKEN}
      - PYTHONUNBUFFERED=1

  prediction_service:
    build:
      context: ./src/models/predict
      dockerfile: Dockerfile
    container_name: prediction_service
    depends_on:
      - training_service
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
      - ./data:/app/data
    environment:
      - TOKENIZER_CONFIG_PATH=${TOKENIZER_CONFIG_PATH}
      - LSTM_MODEL_PATH=${LSTM_MODEL_PATH}
      - VGG16_MODEL_PATH=${VGG16_MODEL_PATH}
      - BEST_WEIGHTS_PATH=${BEST_WEIGHTS_PATH}
      - MAPPER_PATH=${MAPPER_PATH}
      - DATASET_PATH=${DATASET_PATH}
      - IMAGES_PATH=${IMAGES_PATH}
      - PREDICTIONS_PATH=${PREDICTIONS_PATH}
      - TEST_MODEL_LOGGER_PATH=${TEST_MODEL_LOGGER_PATH}
      - PYTHONUNBUFFERED=1

  auth_service:
    build:
      context: ./src/auth_service
      dockerfile: Dockerfile
    container_name: auth_service
    ports:
      - "8011:8011"
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - AUTH_SERVICE_LOGGER_PATH=${AUTH_SERVICE_LOGGER_PATH}
    volumes:
      - ./logs:/app/logs

  serving_service:
    build:
      context: ./src/models/serve
      dockerfile: Dockerfile
    container_name: serving_service
    depends_on:
      - auth_service
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models
    environment:
      - SERVING_LOGGER_PATH=${SERVING_LOGGER_PATH}
      - CONCATENATED_MODEL_PATH=${CONCATENATED_MODEL_PATH}
      - TOKENIZER_CONFIG_PATH=${TOKENIZER_CONFIG_PATH}
      - LSTM_MODEL_PATH=${LSTM_MODEL_PATH}
      - VGG16_MODEL_PATH=${VGG16_MODEL_PATH}
      - BEST_WEIGHTS_PATH=${BEST_WEIGHTS_PATH}
      - MAPPER_PATH=${MAPPER_PATH}
      - PYTHONUNBUFFERED=1

volumes:
  postgres-db-volume: